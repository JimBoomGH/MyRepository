
------------------------------------

APP通用主流框架(  事半功倍 )：网络：okhttp，retrofit  注解：butterknife  数据库：ormlite，litepal（郭霖，资料完整）  
事件通知：evenbus  recycleview：BaseRecyclerViewAdapterHelper
图片缓存：glide  图片压缩框架：compressor，luban  安卓热修复，更新，异常上报：bugly  
功能强大的UI库：https://github.com/li-xiaojun/XPopup
腾讯开源的Android UI框架——QMUI Android     
开源的各种UI组件：https://hndeveloper.github.io/2017/github-android-ui.html#%E6%8A%BD%E5%B1%89%E8%8F%9C%E5%8D%95
各种图标icon：https://www.iconfont.cn/
安卓自动测试：monkey   安卓性能测试：GT    androidstudio的profile
内存泄漏工具：leakcanary  https://www.jianshu.com/p/b83ddffcb3b5  官网https://github.com/square/leakcanary
中文使用说明：https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/
安卓常用工具类的封装（代码工具类）：https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md
今日头条多分辨率屏幕适配方案：
https://www.wanandroid.com/blog/show/2343
https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA
https://github.com/JessYanCoding/AndroidAutoSize
（最早使用不同的layout，不同的drawable资源文件，再来就是使用权重weight，dp，relative，linner，matchparent，今日头条：计算好的 density 在系统中修改）
插件化框架：virtualapk （https://github.com/didi/VirtualAPK）  
热修复框架：Tinker

安卓蓝牙开发：https://github.com/Jasonchenlijian/FastBle
安卓热修复：https://www.jianshu.com/p/704cac3eb13d    原理解析（详细必看）：https://juejin.im/post/5a0ad2b551882531ba1077a2
安卓插件化动态加载：https://segmentfault.com/a/1190000004062866
java内存区域：https://www.cnblogs.com/czwbig/p/11127124.html
安卓网络协议相关：https://blog.csdn.net/zcxwww/article/details/81260449    https://www.cnblogs.com/aademeng/articles/11061359.html
https://www.cnblogs.com/linhaostudy/p/11140823.html

摄像头相关：https://blog.csdn.net/qq_21898059/article/details/50986290
https://juejin.im/entry/56aa36fad342d300542e7510   https://www.jianshu.com/p/0fd646c26f5e
openCamera：https://sourceforge.net/p/opencamera/code/ci/master/tree/

手写图片缓存框架：https://github.com/SingleShu/LemonImageLoaderDemo
涉及的知识点：网络，本地，内存缓存。面向接口的设计，多种下载器的不同实现，动态指向，builder模式，lrucash，hashmap原理，哈希碰撞
hashmap: https://www.cnblogs.com/yuanblog/p/4441017.html
hashmap原理:https://blog.csdn.net/weixin_44460333/article/details/86770169
内存缓存，本地缓存，linkedhashmap原理：https://blog.csdn.net/qq_15893929/article/details/85229364
安卓生产者消费者:https://blog.csdn.net/haigand/article/details/90551070
线程池详解：https://www.cnblogs.com/yysbolg/p/7355800.html    https://blog.csdn.net/iromkoear/article/details/65487811（参数）
newFixedThreadPool和newSingleThreadExecutor在默认情况下使用一个无界的LinkedBlockingQueue。但是有两个缺点：
1. 如果任务一直提交，但线程池又不能及时处理，等待队列将会无限制地加长
2. 系统资源总会有消耗殆尽
所以，推荐使用有界的等待队列，避免资源耗尽，当队列填满后，再来新任务，就要用到饱和策略来处理了。

全面屏，水滴屏，适配：https://www.jianshu.com/p/2b8db60ba8df
concurrentHashmap:线程安全的搞笑并发hashmap
copyonwriteArrayList：并发的集合
sparsearray：安卓优化的集合，数量级在100以内
okhttp：https://blog.csdn.net/qq_29152241/article/details/82011539
retrofit：https://blog.csdn.net/qq_29152241/article/details/82177648#%E4%B8%89%E3%80%81Retrofit2%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8

binder机制：https://blog.csdn.net/luoshengyang/article/details/6618363/
安卓进程通讯AIDL：https://blog.csdn.net/songkai0825/article/details/89345042
app的启动流程：https://github.com/JimBoomGH/android_interview/blob/master/android/advance/app-launch.md
CopyOnWriteArrayList：读读共享、写写互斥、读写互斥、写读互斥。JDK中提供了 CopyOnWriteArrayList 类，相比于在读写锁的思想又更进一步，读取是完全不用加锁的，
并且更厉害的是：写入也不会阻塞读取操作

androidstudio编译运行错误：
简单点来说就是build.gradle(Project)、build.gradle(Module)、gradle-wrapper.properties这三个文件中相关的部分参数出现了问题，
必须找到一个能个成功运行的依赖版本，参数全部配置正确，而不能只改某一个地方，这样永远无法解决这个报错，我之前就是犯了这个错误，
每次只改一个地方，而不是整体配置。

linphone相关资源：
官方源码：https://github.com/BelledonneCommunications/linphone-android   
编译好4.1aar直接运行工程：https://github.com/JimBoomGH/linphone-android
编译相关：
https://blog.csdn.net/liccon/article/details/89532974
https://blog.csdn.net/liccon/article/details/78275899
https://blog.csdn.net/u011077027/article/details/80379763
https://www.jianshu.com/p/0dbb86c29fdb

webrtc资料：
中文网:https://webrtc.org.cn/
开发者社区：https://rtcdeveloper.com/t/topic/13777
https://blog.csdn.net/chenhande1990chenhan/article/details/70862208 
https://blog.csdn.net/youmingyu/article/details/53192714
源码：https://github.com/pchab/AndroidRTC
apprtc：https://blog.csdn.net/dzsw0117/article/details/79203412
webrtc官方服务搭建：https://blog.csdn.net/china_jeffery/article/details/80092309   https://blog.csdn.net/s569646547/article/details/50780682
webrt安卓源码：https://pan.baidu.com/s/1kUyNE55

opencv人脸识别：https://blog.csdn.net/a1306966795/article/details/90045957   https://blog.51cto.com/yangzheng0809/2173165
opencv安卓实例：https://www.jianshu.com/p/e54eee238b9e     https://github.com/JimBoomGH/opencvdemo
opencv图像对比：https://www.cnblogs.com/yszzu/p/10257039.html   https://blog.csdn.net/qq_15602525/article/details/62881679
人脸识别第三方虹软sdk：https://ai.arcsoft.com.cn/manual/docs#/93#12__14

安卓反射与动态代理：https://blog.csdn.net/qq_38356174/article/details/104312440

okhttp源码解析：https://github.com/JimBoomGH/android_interview/blob/master/android/open-source-framework.md

retrofit源码解析：https://www.jianshu.com/p/c1a3a881a144

glide源码解析：https://github.com/JimBoomGH/android_interview/blob/master/android/advance/memory-leak.md

oom分析：https://www.jianshu.com/p/e574f0ffdb42

安卓sd卡相关：https://blog.csdn.net/songqinging/article/details/87936749   https://www.cnblogs.com/xuanwei-qingfeng/p/7364867.html

安卓第三方引用包重复解决：multiDexEnabled true   
https://blog.csdn.net/gx645/article/details/80611916   
https://blog.csdn.net/qq_32454537/article/details/79627228

安卓性能优化工具：systrace：https://blog.csdn.net/jscese/article/details/48373319   安卓studio自带profile

安卓性能优化总结：https://www.jianshu.com/p/d71b51a0e29f    

电量优化：https://blog.csdn.net/u011098381/article/details/79895301
绘制优化：include 、merge、ViewStub：https://blog.csdn.net/u012792686/article/details/72901531

内存泄漏：https://www.jianshu.com/p/bdfd2a6b2681   唤醒锁正确使用：https://www.jianshu.com/p/5db15ce7de1e

直播技术点：
安卓mediacodec音视频编码使用：https://www.jianshu.com/p/f116b6f81ab3

Android主流视频播放及缓存实现原理调研：https://www.jianshu.com/p/f057a03ded0b

摄像头采集数据相关：https://www.2cto.com/kf/201607/532165.html

androidstudio详解：https://developer.android.google.cn/studio/publish/app-signing

安卓开源项目网址：https://p.codekk.com/

玩安卓完整开源资源：https://www.wanandroid.com/article/list/0?cid=254

玩安卓开源客户端:https://github.com/JsonChao/Awesome-WanAndroid

豆瓣开源客户端：https://github.com/DreaminginCodeZH/Douya

玩安卓面试资源：https://www.wanandroid.com/article/list/0?cid=73

面试资源：https://www.jianshu.com/p/20754b1adb4d（简历模板）

编写自己的上线应用：参考：https://github.com/Rayhahah/EasySports

安卓学习进阶之路：https://www.cnblogs.com/cr330326/p/8395424.html

Android性能优化之APK瘦身详解(瘦身73%)：https://blog.csdn.net/qq_32175491/article/details/80071987

微信混淆资源打包：https://blog.csdn.net/burning_xl/article/details/74531027

开发项目常用的工具：相机，图表，表格，图片压缩，常用图标开发前必看：https://www.wanandroid.com/tools  https://www.wanandroid.com/project/list/1?cid=385


git相关操作：
git remote查看远程窗口名称
git branch查看分支
拉取远程服务器origin的master分支：git pull origin master
把本地仓库的分支推送到远程仓库的指定分支：git push <远程仓库的别名> <本地分支名>:<远程分支名>
git命令大全：https://www.jianshu.com/p/93318220cdce

用于学习的相关博客：

GreenDao3.2.0项目的接入和简单的使用
GreenDao3.2的使用，爱不释手
Android ORM 框架：GreenDao 使用详解（进阶篇）
GreenDao数据加密相关博客：

greenDAO的使用详解—(4)greenDAO3.2.2结合sqlcipher加密数据库
greendao3.0以上使用步骤（三）：数据库加密

开发规范：
【强制】Activity 间的数据通信，对于数据量比较大的，避免使用Intent + Parcelable
的方式，可以考虑EventBus 等替代方案，以免造成TransactionTooLargeException。

【强制】Activity 间通过隐式Intent 的跳转，在发出Intent 之前必须通过resolveActivity
检查，避免找不到合适的调用组件，造成ActivityNotFoundException 的异常。

避免在Service#onStartCommand()/onBind()方法中执行耗时操作，如果确
实有需求，应改用IntentService 或采用其他异步机制完成。

避免在BroadcastReceiver#onReceive()中执行耗时操作，如果有耗时工作，
应该创建IntentService 完成，而不应该在BroadcastReceiver 内创建子线程去做。

避免使用隐式Intent 广播敏感信息，信息可能被其他注册了对应
BroadcastReceiver 的App 接收。

不要在Activity#onDestroy()内执行释放资源的工作，例如一些工作线程的
销毁和停止，因为onDestroy()执行的时机可能较晚。可根据实际需要，在
Activity#onPause()/onStop()中结合isFinishing()的判断来执行。

【强制】Activity 或者Fragment 中动态注册BroadCastReceiver 时，registerReceiver()
和unregisterReceiver()要成对出现。

【强制】布局中不得不使用ViewGroup 多重嵌套时，不要使用LinearLayout 嵌套，
改用RelativeLayout，可以有效降低嵌套数。

灵活使用布局，推荐merge、ViewStub 来优化布局，尽可能多的减少UI
布局层级，推荐使用FrameLayout，LinearLayout、RelativeLayout 次之

不能使用ScrollView 包裹ListView/GridView/ExpandableListVIew;因为这
样会把ListView 的所有Item 都加载到内存中，要消耗巨大的内存和cpu 去绘制图
面。

不要在Android 的Application 对象中缓存数据。基础组件之间的数据共享
请使用Intent 等机制，也可使用SharedPreferences 等数据持久化机制。

【强制】使用Adapter 的时候，如果你使用了ViewHolder 做缓存，在getView()的
方法中无论这项convertView 的每个子控件是否需要设置属性(比如某个TextView
设置的文本可能为null，某个按钮的背景色为透明，某控件的颜色为透明等)，都需
要为其显式设置属性(Textview 的文本为空也需要设置setText("")，背景透明也需要
设置)，

【强制】新建线程时，必须通过线程池提供（AsyncTask 或者ThreadPoolExecutor
或者其他形式自定义的线程池），不允许在应用中自行显式创建线程。

【强制】线程池不允许使用Executors 去创建，而是通过ThreadPoolExecutor 的方
式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。

数据库Cursor 必须确保使用完后关闭，以免内存泄漏。




